import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, ReplyKeyboardMarkup, KeyboardButton
import os, json
from datetime import datetime, timedelta

TOKEN = "8305042007:AAE2PX79pcdFuQ59wB6cRXnDqchLOjZxHgM"
bot = telebot.TeleBot(TOKEN)

ADMINS = [542079843]
GROUP_CHAT_ID = -1003003522297
user_states = {}
USERS_FILE = "users.txt"
POSTS_FILE = "posts.json"
IMAGES_DIR = "images"
os.makedirs(IMAGES_DIR, exist_ok=True)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ ---
def load_posts():
    if os.path.exists(POSTS_FILE):
        try:
            with open(POSTS_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if not content:
                    return []
                return json.loads(content)
        except json.JSONDecodeError:
            return []
    return []

def save_posts(posts):
    with open(POSTS_FILE, "w", encoding="utf-8") as f:
        json.dump(posts, f, ensure_ascii=False, indent=4)

def save_post(media, caption, characteristics):
    posts = load_posts()
    post_id = (max([p["post_id"] for p in posts], default=0) + 1)
    post = {
        "post_id": post_id,
        "timestamp": datetime.now().isoformat(),
        "media": media,
        "caption": caption,
        "characteristics": characteristics
    }
    posts.append(post)
    save_posts(posts)
    return post_id

# –®–∞–≥ 3 ‚Äî —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
@bot.message_handler(func=lambda msg: user_states.get(msg.from_user.id, {}).get("step") == "waiting_car_specs")
def handle_car_specs(message):
    user_id = message.from_user.id
    data = user_states[user_id]["data"]
    data["characteristics"] = message.text  # ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π state
    media = data["media"]
    description = data["description"]
    characteristics = data["characteristics"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    save_post(media, description, characteristics)

    bot.send_message(user_id, "‚úÖ –ü–æ—Å—Ç –¥–æ–¥–∞–Ω–æ –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏!")
    user_states.pop(user_id, None)


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r") as f:
        users = set(int(line.strip()) for line in f if line.strip())
else:
    users = set()

def save_users():
    with open(USERS_FILE, "w") as f:
        for user_id in users:
            f.write(str(user_id) + "\n")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"))
    return keyboard

# --- START ---
@bot.message_handler(commands=["start"])
def start(message):
    users.add(message.chat.id)
    save_users()
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤—ñ—Ç! –í–∏ –∑–∞–≤—ñ—Ç–∞–ª–∏ –¥–æ –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—É https://t.me/Prezident_Cars ‚úÖ", reply_markup=main_menu())

# --- POST ALL ---
waiting_for_post = {}
pending_post = {}

@bot.message_handler(commands=["postall"])
def postall(message):
    if message.chat.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õî —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–∞–Ω–Ω—É –∫–æ–º–∞–Ω–¥—É.")
    waiting_for_post[message.chat.id] = "photos"
    pending_post[message.chat.id] = {"photos": [], "title": "", "caption": "", "characteristics": ""}
    bot.send_message(message.chat.id, "‚úçÔ∏è –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –º–∞—à–∏–Ω–∏ (–º–æ–∂–Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞)")

# --- POST ALL (—Ç–µ–∫—Å—Ç) ---
waiting_for_textpost = {}
pending_textpost = {}

@bot.message_handler(commands=["postalltext"])
def postalltext(message):
    if message.chat.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õî —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–∞–Ω–Ω—É –∫–æ–º–∞–Ω–¥—É")
    waiting_for_textpost[message.chat.id] = True
    pending_textpost[message.chat.id] = {"text": ""}
    bot.send_message(message.chat.id, "‚úçÔ∏è –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¢–µ–∫—Å—Ç–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ/–æ–ø–∏—Å–∞–Ω–∏—è/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ ---
@bot.message_handler(func=lambda m: m.chat.id in waiting_for_post, content_types=['photo','text'])
def handle_post(message):
    chat_id = message.chat.id
    step = waiting_for_post[chat_id]
    post = pending_post[chat_id]

    # === 1. –§–æ—Ç–æ ===
    if step == "photos" and message.content_type == 'photo':
        file_id = message.photo[-1].file_id
        post["photos"].append(file_id)
        if len(post["photos"]) == 1:  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
            bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–µ!\n‚úçÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ó–ê–ì–û–õ–û–í–û–ö –¥–ª—è –º–∞—à–∏–Ω–∏")
            waiting_for_post[chat_id] = "title"

    elif step == "photos" and message.content_type == 'text':
        return bot.send_message(chat_id, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Ñ–æ—Ç–æ.")

    # === 2. –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
    elif step == "title" and message.content_type == 'text':
        post["title"] = message.text
        waiting_for_post[chat_id] = "characteristics"
        bot.send_message(chat_id, "‚úçÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ –º–∞—à–∏–Ω–∏")

    # === 3. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ===
    elif step == "characteristics" and message.content_type == 'text':
        post["characteristics"] = message.text
        waiting_for_post[chat_id] = "caption"
        bot.send_message(chat_id, "‚úçÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –¥–æ –º–∞—à–∏–Ω–∏")

    # === 4. –û–ø–∏—Å–∞–Ω–∏–µ ===
    elif step == "caption" and message.content_type == 'text':
        post["caption"] = message.text
        waiting_for_post.pop(chat_id, None)

        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data="send_post"),
            InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∞", callback_data="cancel_post")
        )
        bot.send_message(chat_id, "‚úÖ –£—Å—ñ –¥–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)


# --- –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ—Å—Ç–æ–º ---
def create_user_buttons(post_id, admin=False):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data=f"contact_{post_id}"),
        InlineKeyboardButton("‚≠ê –ó–∞—Ü—ñ–∫–∞–≤–∏–ª–æ", callback_data=f"interest_{post_id}")
    )
    if admin:
        markup.add(InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç", callback_data=f"delete_{post_id}"))
    return markup
# --- Callback —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@bot.callback_query_handler(func=lambda c: c.data in ["send_post", "cancel_post"])
def callback_post(call):
    chat_id = call.message.chat.id
    if call.data == "cancel_post":
        pending_post.pop(chat_id, None)
        return bot.edit_message_text("‚ùå –ü–æ—Å—Ç –≤—ñ–¥–º—ñ–Ω–∏–ª–∏.", chat_id, call.message.message_id)

    if call.data == "send_post":
        post = pending_post.pop(chat_id)
        post_id = save_post(post["photos"], post["caption"], post["characteristics"])

        media = [InputMediaPhoto(file_id) for file_id in post["photos"]]
        text_full = f"{post['caption']}\n\nüìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{post['characteristics']}"

        success = 0
        for user_id in users:
            try:
                bot.send_media_group(user_id, media)
                bot.send_message(user_id, text_full,
                                 reply_markup=create_user_buttons(post_id, admin=(user_id in ADMINS)))
                success += 1
            except: pass

        try:
            bot.send_media_group(GROUP_CHAT_ID, media)
            bot.send_message(GROUP_CHAT_ID, text_full, reply_markup=create_user_buttons(post_id))
        except: pass

        bot.edit_message_text(f"‚úÖ –ü–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —ñ –≤ –≥—Ä—É–ø—É.", chat_id, call.message.message_id)


# --- –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø–æ—Å—Ç–∏ ---
@bot.message_handler(func=lambda m: m.text == "üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó")
def send_recent_posts(message):
    user_id = message.from_user.id
    posts = load_posts()
    if not posts:
        return bot.send_message(user_id, "‚ùå –ü–æ–∫–∏ —â–µ –Ω–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    now = datetime.now()
    recent_posts = [p for p in posts if datetime.fromisoformat(p["timestamp"]) > now - timedelta(hours=24)]
    if not recent_posts:
        return bot.send_message(user_id, "‚ùå –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–µ –±—É–ª–æ.")

    bot.send_message(user_id, "üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑–∞ 24 –≥–æ–¥–∏–Ω–∏:")
    for post in recent_posts:
        photos = post.get("media", [])
        caption = post.get("caption", "–ë–µ–∑ –æ–ø–∏—Å—É")
        characteristics = post.get("characteristics", "")
        text_full = f"{caption}\n\nüìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{characteristics}"

        try:
            if photos:
                bot.send_media_group(user_id, [InputMediaPhoto(f) for f in photos])
            bot.send_message(user_id, text_full,
                             reply_markup=create_user_buttons(post["post_id"], admin=(user_id in ADMINS)))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –ø–æ—Å—Ç–∞: {e}")

# --- –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@bot.callback_query_handler(func=lambda c: c.data.startswith(("contact_", "interest_", "delete_")))
def handle_user_choice(call):
    user_id = call.from_user.id
    try:
        action, post_id_str = call.data.split("_", 1)
        post_id = int(post_id_str)
    except ValueError:
        return

    posts = load_posts()
    post = next((p for p in posts if p.get("post_id") == post_id), None)

    if action in ["contact", "interest"] and not post:
        try:
            bot.send_message(user_id, "‚ùå –¶—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –±—ñ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.")
        except: pass
        return

    if action == "delete" and user_id in ADMINS:
        posts = [p for p in posts if p.get("post_id") != post_id]
        save_posts(posts)
        try:
            bot.send_message(user_id, "‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.")
        except: pass
        return

    if action == "contact":
        for admin_id in ADMINS:
            try:
                bot.send_message(admin_id, f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–±—Ä–∞–≤ üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏\nTelegram: @{call.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            except: pass
        try:
            bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞! –ó –≤–∞–º–∏ –∑–≤—è–∂—É—Ç—Å—è –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —á–∞—Å.")
        except: pass

    if action == "interest":
        user_states[user_id] = {
        "step": "wait_name",
        "data": {},
        "car_desc": post.get("caption", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"),
        "car_specs": post.get("characteristics", "–ù–µ –≤–∫–∞–∑–∞–Ω—ñ"),
        "post_id": post.get("post_id")
    }
    try:
        bot.send_message(user_id, "‚≠ê –í–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è.\n–í–≤–µ–¥—ñ—Ç–µ —Å–≤–æ—î —ñ–º—è(—è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å):")
    except:
        pass


# --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
@bot.message_handler(func=lambda m: m.from_user.id in user_states and user_states[m.from_user.id]["step"] == "wait_name")
def handle_name(message):
    user_id = message.from_user.id
    user_states[user_id]["data"]["name"] = message.text
    user_states[user_id]["step"] = "wait_phone"
    bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑ –≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380123456789):")

@bot.message_handler(func=lambda m: m.from_user.id in user_states and user_states[m.from_user.id]["step"] == "wait_phone")
def handle_phone(message):
    user_id = message.from_user.id
    phone = message.text.strip()
    if len(phone) < 13:
        return bot.send_message(user_id, "‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–≤–∏–Ω–µ–Ω  –±—É—Ç–∏ —Å–∞–º–µ –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ     +380123456789\n–°–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
    user_states[user_id]["data"]["phone"] = phone
    name = user_states[user_id]["data"]["name"]
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_interest"),
        InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_action")
    )
    bot.send_message(user_id, f"üìã –ü—Ä–æ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ:\n\n–Ü–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}", reply_markup=markup)
    user_states[user_id]["step"] = "confirming"

@bot.callback_query_handler(func=lambda c: c.data == "confirm_interest")
def handle_interest_confirm(call):
    user_id = call.from_user.id
    data = user_states.pop(user_id, None)
    if not data:
        return bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞—è–≤–∫–∏ –∞–±–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–π—à–æ–≤.")

    name = data["data"].get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    phone = data["data"].get("phone", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    car_desc = data.get("car_desc", "–ë–µ–∑ –æ–ø–∏—Å—É")
    car_specs = data.get("car_specs", "–ù–µ –≤–∫–∞–∑–∞–Ω—ñ")  # ‚úÖ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–µ–ø–µ—Ä—å —Ç—É—Ç

    username = call.from_user.username or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot.send_message(user_id, "‚úÖ –ó–∞—è–≤–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞! –ó –í–∞–º–∏ –∑–≤ º—è–∂—É—Ç—å—Å—è –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω.")
    except:
        pass

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    for admin_id in ADMINS:
        try:
            bot.send_message(
                admin_id,
                f"üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!\n\n"
                f"üöó –ú–∞—à–∏–Ω–∞: {car_desc}\n"
                f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {car_specs}\n\n"
                f"üë§ –Ü–º'—è: {name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: @{username}"
            )
        except:
            pass



# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@bot.message_handler(commands=["stats"])
def stats_command(message):
    if message.chat.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞ –ø—Ä–∞–≤.")
    bot.send_message(message.chat.id, f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

@bot.message_handler(commands=["checkusers"])
def check_users(message):
    if message.chat.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞ –ø—Ä–∞–≤.")
    inactive = []
    for user_id in list(users):
        try:
            bot.send_chat_action(user_id, "typing")
        except:
            inactive.append(user_id)
            users.remove(user_id)
    bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(inactive)}\n–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(users)}")

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
