import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, ReplyKeyboardMarkup, KeyboardButton
import os, json
from datetime import datetime, timedelta
from collections import defaultdict
import threading
import re
album_buffer = defaultdict(list)
TOKEN = "8305042007:AAE2PX79pcdFuQ59wB6cRXnDqchLOjZxHgM"
bot = telebot.TeleBot(TOKEN, parse_mode="HTML")  # parse_mode –≤–∫–ª—é—á—ë–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ

ADMINS = [542079843]
GROUP_CHAT_ID = -1003003522297
user_states = {}
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, "posts.db")
POSTS_FILE = os.path.join(BASE_DIR, "posts.json")
USERS_FILE = os.path.join(BASE_DIR, "users.txt")
IMAGES_DIR = os.path.join(BASE_DIR, "images")
os.makedirs(IMAGES_DIR, exist_ok=True)

os.makedirs(IMAGES_DIR, exist_ok=True)

def download_media(file_id: str) -> str:
    file_info = bot.get_file(file_id)
    data = bot.download_file(file_info.file_path)
    save_path = os.path.join(IMAGES_DIR, f"{file_id}.jpg")
    with open(save_path, "wb") as f:
        f.write(data)
    return save_path

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ ---
def load_posts():
    if os.path.exists(POSTS_FILE):
        try:
            with open(POSTS_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if not content:
                    return []
                return json.loads(content)
        except json.JSONDecodeError:
            return []
    return []

def save_posts(posts):
    with open(POSTS_FILE, "w", encoding="utf-8") as f:
        json.dump(posts, f, ensure_ascii=False, indent=4)

import shutil

SITE_IMAGES_DIR = os.path.join("..", "site", "katalog", "images")
os.makedirs(SITE_IMAGES_DIR, exist_ok=True)

def save_post(media, title, caption, characteristics):
    posts = load_posts()
    post_id = (max([p.get("post_id", 0) for p in posts], default=0) + 1)

    renamed_media = []
    for idx, file_id in enumerate(media, start=1):
        old_path = os.path.join("bot/images", f"{file_id}.jpg")
        new_name = f"img{post_id}-{idx}.jpg"
        new_path = os.path.join("bot/images", new_name)

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ bot/images
        if os.path.exists(old_path):
            shutil.move(old_path, new_path)

        # –ö–æ–ø–∏—Ä—É–µ–º –≤ site/images (–¥–ª—è —Å–∞–π—Ç–∞)
        site_path = os.path.join("site/images", new_name)
        os.makedirs(os.path.dirname(site_path), exist_ok=True)
        shutil.copy2(new_path, site_path)

        renamed_media.append(new_name)

    post = {
        "post_id": post_id,
        "timestamp": datetime.now().isoformat(),
        "media": renamed_media,
        "title": title,
        "caption": caption,
        "characteristics": characteristics
    }

    posts.append(post)
    save_posts(posts)

    return post
   # üî• –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –ø–æ—Å—Ç, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ id




# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ---
if os.path.exists(USERS_FILE):
    with open(USERS_FILE, "r") as f:
        users = set(int(line.strip()) for line in f if line.strip())
else:
    users = set()

def save_users():
    with open(USERS_FILE, "w") as f:
        for user_id in users:
            f.write(str(user_id) + "\n")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"))
    return keyboard

# --- START ---
@bot.message_handler(commands=["start"])
def start(message):
    users.add(message.chat.id)
    save_users()
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤—ñ—Ç! –í–∏ –∑–∞–≤—ñ—Ç–∞–ª–∏ –¥–æ –±–æ—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—É https://t.me/Prezident_Cars ‚úÖ",
        reply_markup=main_menu()
    )

# --- POST ALL ---
waiting_for_post = {}
pending_post = {}

@bot.message_handler(commands=["postall"])
def postall(message):
    if message.chat.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õî —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–∞–Ω–Ω—É –∫–æ–º–∞–Ω–¥—É.")
    waiting_for_post[message.chat.id] = "photos"
    pending_post[message.chat.id] = {"photos": [], "title": "", "caption": "", "characteristics": ""}
    bot.send_message(message.chat.id, "‚úçÔ∏è –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –º–∞—à–∏–Ω–∏ (–º–æ–∂–Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞). –ü—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ —Ñ–æ—Ç–æ —è –ø–æ–ø—Ä–æ—à—É –∑–∞–≥–æ–ª–æ–≤–æ–∫.")

# --- POST ALL (—Ç–µ–∫—Å—Ç) ---
waiting_for_textpost = {}
pending_textpost = {}

@bot.message_handler(commands=["postalltext"])
def postalltext(message):
    if message.chat.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õî —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥–∞–Ω–Ω—É –∫–æ–º–∞–Ω–¥—É")
    waiting_for_textpost[message.chat.id] = True
    pending_textpost[message.chat.id] = {"text": ""}
    bot.send_message(message.chat.id, "‚úçÔ∏è –í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¢–µ–∫—Å—Ç–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")

@bot.message_handler(func=lambda m: m.chat.id in waiting_for_post, content_types=['photo'])
def handle_photos(message):
    chat_id = message.chat.id
    step = waiting_for_post[chat_id]
    post = pending_post[chat_id]

    # === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–∞ ===
    if message.media_group_id:
        album_buffer[message.media_group_id].append(message)

        # –∂–¥—ë–º 1.5 —Å–µ–∫, –ø–æ–∫–∞ –¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏—à–ª—ë—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞
        def process_album():
            photos = album_buffer.pop(message.media_group_id, [])
            for msg in photos:
                file_id = msg.photo[-1].file_id
                download_media(file_id)
                post["photos"].append(file_id)

            if photos:
                bot.send_message(
                    chat_id,
                    f"üì∑ –î–æ–¥–∞–Ω–æ {len(photos)} —Ñ–æ—Ç–æ!\n‚úçÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ó–ê–ì–û–õ–û–í–û–ö –¥–ª—è –º–∞—à–∏–Ω–∏"
                )
                waiting_for_post[chat_id] = "title"

        threading.Timer(1.5, process_album).start()
        return

    # === –û–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ ===
    if step == "photos":
        file_id = message.photo[-1].file_id
        download_media(file_id)
        post["photos"].append(file_id)

        if len(post["photos"]) == 1:
            bot.send_message(chat_id, "üì∑ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–µ!\n‚úçÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ó–ê–ì–û–õ–û–í–û–ö –¥–ª—è –º–∞—à–∏–Ω–∏")
            waiting_for_post[chat_id] = "title"

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ/–∑–∞–≥–æ–ª–æ–≤–∫–∞/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫/–æ–ø–∏—Å–∞–Ω–∏—è ---
@bot.message_handler(func=lambda m: m.chat.id in waiting_for_post, content_types=['photo','text'])
def handle_post(message):
    chat_id = message.chat.id
    step = waiting_for_post[chat_id]
    post = pending_post[chat_id]

    # === 1) –§–æ—Ç–æ ===
    if step == "photos":
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id  # –±–µ—Ä—ë–º id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ

            # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É –≤ –ø–∞–ø–∫—É bot/images/
            try:
                download_media(file_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ {file_id}: {e}")

            post["photos"].append(file_id)

            if len(post["photos"]) == 1:
                bot.send_message(
                    chat_id,
                    "üì∑ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–µ!\n‚úçÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ó–ê–ì–û–õ–û–í–û–ö –¥–ª—è –º–∞—à–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BMW 530d 2019)"
                )
                waiting_for_post[chat_id] = "title"
        else:
            bot.send_message(chat_id, "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ.")
        return

    # === 2) –ó–∞–≥–æ–ª–æ–≤–æ–∫ ===
    if step == "title" and message.content_type == 'text':
        post["title"] = message.text.strip()
        waiting_for_post[chat_id] = "characteristics"
        bot.send_message(chat_id, "‚úçÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò (–≤—ñ–ª—å–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ —Å–ø–∏—Å–∫–æ–º)")
        return

    # === 3) –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ===
    if step == "characteristics" and message.content_type == 'text':
        post["characteristics"] = message.text.strip()
        waiting_for_post[chat_id] = "caption"
        bot.send_message(chat_id, "‚úçÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –û–ü–ò–° (—Å—Ç–∞–Ω, —ñ—Å—Ç–æ—Ä—ñ—è, –¥–æ–¥–∞—Ç–∫–æ–≤–æ)")
        return

    # === 4) –û–ø–∏—Å ===
    if step == "caption" and message.content_type == 'text':
        post["caption"] = message.text.strip()
        waiting_for_post.pop(chat_id, None)

        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        preview_text = (
            f"<b>üè∑ {post['title'] or '–ë–µ–∑ –Ω–∞–∑–≤–∏'}</b>\n\n"
            f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{post['characteristics'] or '‚Äî'}\n\n"
            f"üìù {post['caption'] or '‚Äî'}"
        )
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", callback_data="send_post"),
            InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∞", callback_data="cancel_post")
        )
        bot.send_message(chat_id, "‚úÖ –£—Å—ñ –¥–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥:")
        if post["photos"]:
            try:
                bot.send_media_group(chat_id, [InputMediaPhoto(fid) for fid in post["photos"]])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ: {e}")
        bot.send_message(chat_id, preview_text, reply_markup=markup)
        return


# --- –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ—Å—Ç–æ–º ---
def create_user_buttons(post_id, admin=False):
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data=f"contact_{post_id}"),
        InlineKeyboardButton("‚≠ê –ó–∞—Ü—ñ–∫–∞–≤–∏–ª–æ", callback_data=f"interest_{post_id}")
    )
    if admin:
        markup.add(InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç", callback_data=f"delete_{post_id}"))
    return markup

# --- Callback —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@bot.callback_query_handler(func=lambda c: c.data in ["send_post", "cancel_post"])
def callback_post(call):
    chat_id = call.message.chat.id

    if call.data == "cancel_post":
        pending_post.pop(chat_id, None)
        return bot.edit_message_text("‚ùå –ü–æ—Å—Ç –≤—ñ–¥–º—ñ–Ω–∏–ª–∏.", chat_id, call.message.message_id)

    if call.data == "send_post":
        post = pending_post.pop(chat_id)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
        saved_post = save_post(post["photos"], post["title"], post["caption"], post["characteristics"])

    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
        generate_car_page(saved_post)

        # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ç–∞–ª–æ–≥
        add_to_catalog(saved_post)

        media = [InputMediaPhoto(file_id) for file_id in post["photos"]]
        text_full = (
        f"<b>üè∑ {post['title'] or '–ë–µ–∑ –Ω–∞–∑–≤–∏'}</b>\n\n"
        f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{post['characteristics'] or '‚Äî'}\n\n"
        f"üìù {post['caption'] or '‚Äî'}"
        )


        success = 0
        # —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id in list(users):
            try:
                if media:
                    bot.send_media_group(user_id, media)
                bot.send_message(
                    user_id,
                    text_full,
                    reply_markup=create_user_buttons(post.get('post_id'), admin=(user_id in ADMINS))
                )
                success += 1
            except:
                # –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö
                pass

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        try:
            if media:
                bot.send_media_group(GROUP_CHAT_ID, media)
            bot.send_message(GROUP_CHAT_ID, text_full, reply_markup=create_user_buttons(saved_post['post_id']))
        except:
            pass

        bot.edit_message_text(f"‚úÖ –ü–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {success} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —ñ –≤ –≥—Ä—É–ø—É.", chat_id, call.message.message_id)

# --- –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø–æ—Å—Ç–∏ ---
@bot.message_handler(func=lambda m: m.text == "üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó")
def send_recent_posts(message):
    user_id = message.from_user.id
    posts = load_posts()
    if not posts:
        return bot.send_message(user_id, "‚ùå –ü–æ–∫–∏ —â–µ –Ω–µ–º–∞—î –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    now = datetime.now()
    recent_posts = [p for p in posts if datetime.fromisoformat(p["timestamp"]) > now - timedelta(hours=24)]
    if not recent_posts:
        return bot.send_message(user_id, "‚ùå –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–µ –±—É–ª–æ.")

    bot.send_message(user_id, "üì∞ –ê–∫—Ç—É–∞–ª—å–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∑–∞ 24 –≥–æ–¥–∏–Ω–∏:")

    def build_media_entities(media_items):
        entities = []
        for m in media_items:
            # –ï—Å–ª–∏ —ç—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ (–ø–æ—Å–ª–µ save_post) ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            if isinstance(m, str) and m.lower().endswith(".jpg"):
                local_path = os.path.join(IMAGES_DIR, m)
                site_path  = os.path.join(SITE_IMAGES_DIR, m) if 'SITE_IMAGES_DIR' in globals() else None

                path = local_path if os.path.exists(local_path) else (site_path if site_path and os.path.exists(site_path) else None)
                if path:
                    entities.append(InputMediaPhoto(open(path, "rb")))
                else:
                    print(f"–§–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {m}")
            else:
                # –ò–Ω–∞—á–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ file_id (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π)
                entities.append(InputMediaPhoto(m))
        return entities

    for post in recent_posts:
        media_list = post.get("media", []) or []
        title = post.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
        caption = post.get("caption", "–ë–µ–∑ –æ–ø–∏—Å—É")
        characteristics = post.get("characteristics", "‚Äî")

        text_full = (
            f"<b>üè∑ {title}</b>\n\n"
            f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{characteristics}\n\n"
            f"üìù {caption}"
        )

        try:
            if media_list:
                media_entities = build_media_entities(media_list)
                if media_entities:
                    bot.send_media_group(user_id, media_entities)
            bot.send_message(
                user_id,
                text_full,
                reply_markup=create_user_buttons(post.get("post_id"), admin=(user_id in ADMINS))
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –ø–æ—Å—Ç–∞: {e}")


# --- –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@bot.callback_query_handler(func=lambda c: c.data.startswith(("contact_", "interest_", "delete_")))
def handle_user_choice(call):
    user_id = call.from_user.id
    try:
        action, post_id_str = call.data.split("_", 1)
        post_id = int(post_id_str)
    except ValueError:
        return

    posts = load_posts()
    post = next((p for p in posts if p.get("post_id") == post_id), None)

    if action in ["contact", "interest"] and not post:
        try:
            bot.send_message(user_id, "‚ùå –¶—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –±—ñ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.")
        except: pass
        return

    if action == "delete" and user_id in ADMINS:
        posts = [p for p in posts if p.get("post_id") != post_id]
        save_posts(posts)
        try:
            bot.send_message(user_id, "‚úÖ –ü–æ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏.")
        except: pass
        return

    if action == "contact":
        for admin_id in ADMINS:
            try:
                bot.send_message(admin_id, f"üîî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏\nTelegram: @{call.from_user.username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}")
            except: pass
        try:
            bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞! –ó –≤–∞–º–∏ –∑–≤'—è–∂—É—Ç—å—Å—è –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —á–∞—Å.")
        except: pass

    if action == "interest":
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≤–∫–∏
        user_states[user_id] = {
            "step": "wait_name",
            "data": {},
            "car_title": post.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∏"),
            "car_desc": post.get("caption", "–ë–µ–∑ –æ–ø–∏—Å—É"),
            "car_specs": post.get("characteristics", "–ù–µ –≤–∫–∞–∑–∞–Ω—ñ"),
            "post_id": post.get("post_id")
        }
        try:
            bot.send_message(user_id, "‚≠ê –í–∞—Å –∑–∞—Ü—ñ–∫–∞–≤–∏–ª–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è.\n–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è (—è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å):")
        except:
            pass

# --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ ---
@bot.message_handler(func=lambda m: m.from_user.id in user_states and user_states[m.from_user.id]["step"] == "wait_name")
def handle_name(message):
    user_id = message.from_user.id
    user_states[user_id]["data"]["name"] = message.text.strip()
    user_states[user_id]["step"] = "wait_phone"
    bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: +380123456789):")

@bot.message_handler(func=lambda m: m.from_user.id in user_states and user_states[m.from_user.id]["step"] == "wait_phone")
def handle_phone(message):
    user_id = message.from_user.id
    phone = message.text.strip()
    if len(phone) < 13 or not phone.startswith("+"):
        return bot.send_message(user_id, "‚ö†Ô∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380123456789\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
    user_states[user_id]["data"]["phone"] = phone
    name = user_states[user_id]["data"]["name"]
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_interest"),
        InlineKeyboardButton("‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏", callback_data="cancel_action")
    )
    bot.send_message(user_id, f"üìã –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ:\n\n–Ü–º'—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}", reply_markup=markup)
    user_states[user_id]["step"] = "confirming"

@bot.callback_query_handler(func=lambda c: c.data in ["confirm_interest", "cancel_action"])
def handle_interest_confirm(call):
    user_id = call.from_user.id

    if call.data == "cancel_action":
        user_states.pop(user_id, None)
        try:
            return bot.edit_message_text("‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", call.message.chat.id, call.message.message_id)
        except:
            return

    data = user_states.pop(user_id, None)
    if not data:
        return bot.answer_callback_query(call.id, "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –∑–∞—è–≤–∫–∏ –∞–±–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–π—à–æ–≤.")

    name = data["data"].get("name", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    phone = data["data"].get("phone", "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")
    car_title = data.get("car_title", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
    car_desc = data.get("car_desc", "–ë–µ–∑ –æ–ø–∏—Å—É")
    car_specs = data.get("car_specs", "–ù–µ –≤–∫–∞–∑–∞–Ω—ñ")
    username = call.from_user.username or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot.send_message(user_id, "‚úÖ –ó–∞—è–≤–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞! –ó –í–∞–º–∏ –∑–≤ º—è–∂—É—Ç—å—Å—è –≤ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ—Ä–º—ñ–Ω.")
    except:
        pass

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    for admin_id in ADMINS:
        try:
            bot.send_message(
                admin_id,
                f"üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞!\n\n"
                f"üè∑ <b>{car_title}</b>\n"
                f"üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {car_specs}\n"
                f"üìù –û–ø–∏—Å: {car_desc}\n\n"
                f"üë§ –Ü–º'—è: {name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üí¨ –¢–µ–ª–µ–≥—Ä–∞–º: @{username}"
            )
        except:
            pass

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
@bot.message_handler(commands=["stats"])
def stats_command(message):
    if message.chat.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞ –ø—Ä–∞–≤.")
    bot.send_message(message.chat.id, f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(users)}")

@bot.message_handler(commands=["checkusers"])
def check_users(message):
    if message.chat.id not in ADMINS:
        return bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ–º–∞ –ø—Ä–∞–≤.")
    inactive = []
    for user_id in list(users):
        try:
            bot.send_chat_action(user_id, "typing")
        except:
            inactive.append(user_id)
            users.remove(user_id)
    bot.send_message(message.chat.id, f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í–∏–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {len(inactive)}\n–ó–∞—Ä–∞–∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö: {len(users)}")

# === –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML ===
def generate_car_page(post, images_path="images", template_path="site/templatecar/template.html", output_folder="site/carsfolder"):
    import re

    # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
    with open(template_path, "r", encoding="utf-8") as f:
        template = f.read()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    filename = re.sub(r'\W+', '', post["title"].lower()) + ".html"
    filepath = os.path.join(output_folder, filename)

    main_photo = f"../{images_path}/{post['media'][0]}" if post["media"] else ""
    gallery_html = "\n".join(
        [f'<img src="../{images_path}/{img}" alt="car image">' for img in post["media"]]
    )

    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ —à–∞–±–ª–æ–Ω
    html_content = (
        template.replace("{{title}}", post["title"])
                .replace("{{description}}", post["caption"])
                .replace("{{features}}", post["characteristics"])
                .replace("{{main_photo}}", main_photo)
                .replace("{{gallery}}", gallery_html)
    )

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(output_folder, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML
    with open(filepath, "w", encoding="utf-8") as f:
        f.write(html_content)

    print(f"[INFO] –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: {filepath}")
    return filepath

def add_to_catalog(post, katalog_path="site/katalogtemp/katalog.html"):
    # —á–∏—Ç–∞–µ–º html –∫–∞—Ç–∞–ª–æ–≥–∞
    with open(katalog_path, "r", encoding="utf-8") as f:
        katalog_html = f.read()

    import re
    filename = re.sub(r'\W+', '', post["title"].lower()) + ".html"

    # –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω—É –∫–∞—Ç–∞–ª–æ–≥–∞
    card_html = f"""
    <a href="../carsfolder/{filename}" class="card">
        <img src="../images/{post['media'][0]}" alt="{post['title']}">
        <h2>{post['title']}</h2>
        <p>{post['caption']}</p>
    </a>
    """

    # –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ </div> –∫–∞—Ç–∞–ª–æ–≥–∞
    if '<div class="catalog-grid">' in katalog_html:
        katalog_html = katalog_html.replace(
            "</div>\n\n  <!-- –ü–∞–≥–∏–Ω–∞—Ü–∏—è -->", 
            card_html + "\n    </div>\n\n  <!-- –ü–∞–≥–∏–Ω–∞—Ü–∏—è -->"
        )
    else:
        # fallback ‚Äî –≤ –∫–æ–Ω–µ—Ü body
        katalog_html = katalog_html.replace("</body>", card_html + "\n</body>")

    with open(katalog_path, "w", encoding="utf-8") as f:
        f.write(katalog_html)

    print(f"[INFO] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥: {post['title']}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
